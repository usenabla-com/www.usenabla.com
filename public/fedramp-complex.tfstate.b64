{
  "version": 4,
  "terraform_version": "1.5.0",
  "serial": 1,
  "lineage": "d4e5f6a7-b8c9-0123-def4-567890abcdef",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "aws_vpc",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "vpc-0d1e2f3a4b5c67890",
            "arn": "arn:aws:ec2:us-gov-west-1:123456789012:vpc/vpc-0d1e2f3a4b5c67890",
            "cidr_block": "10.30.0.0/16",
            "enable_dns_hostnames": true,
            "enable_dns_support": true,
            "instance_tenancy": "dedicated",
            "main_route_table_id": "rtb-0d23456789abcdef0",
            "owner_id": "123456789012",
            "tags": {
              "Name": "fedramp-complex-vpc",
              "Environment": "production",
              "Classification": "CUI",
              "Project": "FedRAMP-Moderate",
              "Compliance": "NIST-800-53",
              "Owner": "security-team@company.gov"
            },
            "tags_all": {
              "Name": "fedramp-complex-vpc",
              "Environment": "production",
              "Classification": "CUI",
              "Project": "FedRAMP-Moderate",
              "Compliance": "NIST-800-53",
              "Owner": "security-team@company.gov"
            }
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_subnet",
      "name": "public_a",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "subnet-0d23456789abcdef0",
            "arn": "arn:aws:ec2:us-gov-west-1:123456789012:subnet/subnet-0d23456789abcdef0",
            "availability_zone": "us-gov-west-1a",
            "availability_zone_id": "usgw1-az1",
            "cidr_block": "10.30.100.0/24",
            "map_public_ip_on_launch": true,
            "owner_id": "123456789012",
            "vpc_id": "vpc-0d1e2f3a4b5c67890",
            "tags": {
              "Name": "complex-public-a",
              "Environment": "production",
              "Type": "public",
              "Compliance": "NIST-800-53"
            },
            "tags_all": {
              "Name": "complex-public-a",
              "Environment": "production",
              "Type": "public",
              "Compliance": "NIST-800-53"
            }
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_subnet",
      "name": "public_b",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "subnet-0d3456789abcdef01",
            "arn": "arn:aws:ec2:us-gov-west-1:123456789012:subnet/subnet-0d3456789abcdef01",
            "availability_zone": "us-gov-west-1b",
            "availability_zone_id": "usgw1-az2",
            "cidr_block": "10.30.101.0/24",
            "map_public_ip_on_launch": true,
            "owner_id": "123456789012",
            "vpc_id": "vpc-0d1e2f3a4b5c67890",
            "tags": {
              "Name": "complex-public-b",
              "Environment": "production",
              "Type": "public",
              "Compliance": "NIST-800-53"
            },
            "tags_all": {
              "Name": "complex-public-b",
              "Environment": "production",
              "Type": "public",
              "Compliance": "NIST-800-53"
            }
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_subnet",
      "name": "private_app_a",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "subnet-0d456789abcdef012",
            "arn": "arn:aws:ec2:us-gov-west-1:123456789012:subnet/subnet-0d456789abcdef012",
            "availability_zone": "us-gov-west-1a",
            "availability_zone_id": "usgw1-az1",
            "cidr_block": "10.30.1.0/24",
            "map_public_ip_on_launch": false,
            "owner_id": "123456789012",
            "vpc_id": "vpc-0d1e2f3a4b5c67890",
            "tags": {
              "Name": "complex-app-a",
              "Environment": "production",
              "Type": "private",
              "Compliance": "NIST-800-53"
            },
            "tags_all": {
              "Name": "complex-app-a",
              "Environment": "production",
              "Type": "private",
              "Compliance": "NIST-800-53"
            }
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_subnet",
      "name": "private_app_b",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "subnet-0d56789abcdef0123",
            "arn": "arn:aws:ec2:us-gov-west-1:123456789012:subnet/subnet-0d56789abcdef0123",
            "availability_zone": "us-gov-west-1b",
            "availability_zone_id": "usgw1-az2",
            "cidr_block": "10.30.2.0/24",
            "map_public_ip_on_launch": false,
            "owner_id": "123456789012",
            "vpc_id": "vpc-0d1e2f3a4b5c67890",
            "tags": {
              "Name": "complex-app-b",
              "Environment": "production",
              "Type": "private",
              "Compliance": "NIST-800-53"
            },
            "tags_all": {
              "Name": "complex-app-b",
              "Environment": "production",
              "Type": "private",
              "Compliance": "NIST-800-53"
            }
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_subnet",
      "name": "private_data_a",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "subnet-0d6789abcdef01234",
            "arn": "arn:aws:ec2:us-gov-west-1:123456789012:subnet/subnet-0d6789abcdef01234",
            "availability_zone": "us-gov-west-1a",
            "availability_zone_id": "usgw1-az1",
            "cidr_block": "10.30.3.0/24",
            "map_public_ip_on_launch": false,
            "owner_id": "123456789012",
            "vpc_id": "vpc-0d1e2f3a4b5c67890",
            "tags": {
              "Name": "complex-data-a",
              "Environment": "production",
              "Type": "database",
              "Compliance": "NIST-800-53"
            },
            "tags_all": {
              "Name": "complex-data-a",
              "Environment": "production",
              "Type": "database",
              "Compliance": "NIST-800-53"
            }
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_subnet",
      "name": "private_data_b",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "subnet-0d789abcdef012345",
            "arn": "arn:aws:ec2:us-gov-west-1:123456789012:subnet/subnet-0d789abcdef012345",
            "availability_zone": "us-gov-west-1b",
            "availability_zone_id": "usgw1-az2",
            "cidr_block": "10.30.4.0/24",
            "map_public_ip_on_launch": false,
            "owner_id": "123456789012",
            "vpc_id": "vpc-0d1e2f3a4b5c67890",
            "tags": {
              "Name": "complex-data-b",
              "Environment": "production",
              "Type": "database",
              "Compliance": "NIST-800-53"
            },
            "tags_all": {
              "Name": "complex-data-b",
              "Environment": "production",
              "Type": "database",
              "Compliance": "NIST-800-53"
            }
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_internet_gateway",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "igw-0d23456789abcdef0",
            "arn": "arn:aws:ec2:us-gov-west-1:123456789012:internet-gateway/igw-0d23456789abcdef0",
            "owner_id": "123456789012",
            "vpc_id": "vpc-0d1e2f3a4b5c67890",
            "tags": {
              "Name": "fedramp-complex-igw",
              "Environment": "production",
              "Classification": "Public",
              "Compliance": "NIST-800-53"
            },
            "tags_all": {
              "Name": "fedramp-complex-igw",
              "Environment": "production",
              "Classification": "Public",
              "Compliance": "NIST-800-53"
            }
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_nat_gateway",
      "name": "a",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "nat-0d23456789abcdef0",
            "allocation_id": "eipalloc-0d23456789abcdef0",
            "connectivity_type": "public",
            "network_interface_id": "eni-0d23456789abcdef0",
            "private_ip": "10.30.100.5",
            "public_ip": "203.0.113.25",
            "subnet_id": "subnet-0d23456789abcdef0",
            "tags": {
              "Name": "fedramp-complex-nat-a",
              "Environment": "production",
              "Classification": "CUI",
              "Compliance": "NIST-800-53"
            },
            "tags_all": {
              "Name": "fedramp-complex-nat-a",
              "Environment": "production",
              "Classification": "CUI",
              "Compliance": "NIST-800-53"
            }
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group",
      "name": "alb_sg",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "sg-0d23456789abcdef0",
            "arn": "arn:aws:ec2:us-gov-west-1:123456789012:security-group/sg-0d23456789abcdef0",
            "description": "ALB security group",
            "egress": [
              {
                "cidr_blocks": ["10.30.0.0/16"],
                "description": "to internal subnets",
                "from_port": 443,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 443
              }
            ],
            "ingress": [
              {
                "cidr_blocks": ["0.0.0.0/0"],
                "description": "HTTPS from internet",
                "from_port": 443,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 443
              }
            ],
            "name": "fedramp-complex-alb-sg",
            "owner_id": "123456789012",
            "vpc_id": "vpc-0d1e2f3a4b5c67890",
            "tags": {
              "Name": "complex-alb-sg",
              "Environment": "production",
              "Classification": "CUI",
              "Compliance": "NIST-800-53"
            },
            "tags_all": {
              "Name": "complex-alb-sg",
              "Environment": "production",
              "Classification": "CUI",
              "Compliance": "NIST-800-53"
            }
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_lb",
      "name": "app_alb",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "arn:aws:elasticloadbalancing:us-gov-west-1:123456789012:loadbalancer/app/fedramp-complex-alb/0123456789abcdef",
            "arn_suffix": "app/fedramp-complex-alb/0123456789abcdef",
            "dns_name": "fedramp-complex-alb-0123456789abcdef.us-gov-west-1.elb.amazonaws.com",
            "ip_address_type": "ipv4",
            "internal": false,
            "load_balancer_type": "application",
            "name": "fedramp-complex-alb",
            "security_groups": ["sg-0d23456789abcdef0"],
            "subnets": ["subnet-0d23456789abcdef0", "subnet-0d3456789abcdef01"],
            "tags": {
              "Name": "fedramp-complex-alb",
              "Environment": "production",
              "Classification": "CUI",
              "Compliance": "NIST-800-53"
            },
            "tags_all": {
              "Name": "fedramp-complex-alb",
              "Environment": "production",
              "Classification": "CUI",
              "Compliance": "NIST-800-53"
            },
            "zone_id": "Z2ZVHEO3NLW8XQ"
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_lb_target_group",
      "name": "ecs_tg",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "arn:aws:elasticloadbalancing:us-gov-west-1:123456789012:targetgroup/fedramp-complex-tg/abcdef0123456789",
            "arn_suffix": "targetgroup/fedramp-complex-tg/abcdef0123456789",
            "deregistration_delay": 300,
            "health_check": [
              {
                "enabled": true,
                "healthy_threshold": 3,
                "interval": 30,
                "matcher": "200-399",
                "path": "/health",
                "port": "traffic-port",
                "protocol": "HTTP",
                "timeout": 5,
                "unhealthy_threshold": 3
              }
            ],
            "load_balancing_algorithm_type": "round_robin",
            "name": "fedramp-complex-tg",
            "port": 8080,
            "protocol": "HTTP",
            "target_type": "ip",
            "vpc_id": "vpc-0d1e2f3a4b5c67890",
            "tags": {
              "Environment": "production"
            },
            "tags_all": {
              "Environment": "production"
            }
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_lb_listener",
      "name": "https",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "arn:aws:elasticloadbalancing:us-gov-west-1:123456789012:listener/app/fedramp-complex-alb/0123456789abcdef/0123abcd4567efgh",
            "certificate_arn": "arn:aws:acm:us-gov-west-1:123456789012:certificate/11111111-2222-3333-4444-555555555555",
            "load_balancer_arn": "arn:aws:elasticloadbalancing:us-gov-west-1:123456789012:loadbalancer/app/fedramp-complex-alb/0123456789abcdef",
            "port": 443,
            "protocol": "HTTPS",
            "ssl_policy": "ELBSecurityPolicy-TLS13-1-2-2021-06",
            "default_action": [
              {
                "type": "forward",
                "target_group_arn": "arn:aws:elasticloadbalancing:us-gov-west-1:123456789012:targetgroup/fedramp-complex-tg/abcdef0123456789"
              }
            ],
            "tags": {}
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_wafv2_web_acl",
      "name": "app_waf",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "a1b2c3d4-1111-2222-3333-444455556666",
            "arn": "arn:aws:wafv2:us-gov-west-1:123456789012:regional/webacl/fedramp-complex-waf/a1b2c3d4-1111-2222-3333-444455556666",
            "capacity": 150,
            "default_action": [{"allow": {}}],
            "description": "WAF for ALB",
            "name": "fedramp-complex-waf",
            "rules": [
              {
                "name": "AWSManagedRulesCommonRuleSet",
                "priority": 1,
                "override_action": [{"none": {}}],
                "statement": [{"managed_rule_group_statement": [{"name": "AWSManagedRulesCommonRuleSet", "vendor_name": "AWS"}]}],
                "visibility_config": [{"cloudwatch_metrics_enabled": true, "metric_name": "common", "sampled_requests_enabled": true}]
              }
            ],
            "scope": "REGIONAL",
            "visibility_config": [{"cloudwatch_metrics_enabled": true, "metric_name": "fedramp-complex-waf", "sampled_requests_enabled": true}],
            "tags": {
              "Environment": "production"
            },
            "tags_all": {
              "Environment": "production"
            }
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_wafv2_web_acl_association",
      "name": "alb_assoc",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "arn:aws:elasticloadbalancing:us-gov-west-1:123456789012:loadbalancer/app/fedramp-complex-alb/0123456789abcdef/assoc",
            "resource_arn": "arn:aws:elasticloadbalancing:us-gov-west-1:123456789012:loadbalancer/app/fedramp-complex-alb/0123456789abcdef",
            "web_acl_arn": "arn:aws:wafv2:us-gov-west-1:123456789012:regional/webacl/fedramp-complex-waf/a1b2c3d4-1111-2222-3333-444455556666"
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_ecs_cluster",
      "name": "app_cluster",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "arn:aws:ecs:us-gov-west-1:123456789012:cluster/fedramp-complex-cluster",
            "arn": "arn:aws:ecs:us-gov-west-1:123456789012:cluster/fedramp-complex-cluster",
            "name": "fedramp-complex-cluster",
            "capacity_providers": ["FARGATE", "FARGATE_SPOT"],
            "tags": {
              "Environment": "production"
            },
            "tags_all": {
              "Environment": "production"
            }
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_ecr_repository",
      "name": "app_repo",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "fedramp-complex/app",
            "arn": "arn:aws:ecr:us-gov-west-1:123456789012:repository/fedramp-complex/app",
            "name": "fedramp-complex/app",
            "image_scanning_configuration": [{"scan_on_push": true}],
            "image_tag_mutability": "IMMUTABLE",
            "encryption_configuration": [{"encryption_type": "KMS", "kms_key": "arn:aws:kms:us-gov-west-1:123456789012:key/43333333-1234-1234-1234-123456789012"}],
            "tags": {
              "Environment": "production"
            },
            "tags_all": {
              "Environment": "production"
            }
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_ecs_task_definition",
      "name": "app_task",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "fedramp-complex-task:1",
            "arn": "arn:aws:ecs:us-gov-west-1:123456789012:task-definition/fedramp-complex-task:1",
            "family": "fedramp-complex-task",
            "cpu": "512",
            "memory": "1024",
            "network_mode": "awsvpc",
            "requires_compatibilities": ["FARGATE"],
            "execution_role_arn": "arn:aws:iam::123456789012:role/ecsTaskExecutionRoleFedRAMP",
            "task_role_arn": "arn:aws:iam::123456789012:role/fedramp-complex-task-role",
            "container_definitions": "[{\"name\":\"app\",\"image\":\"123456789012.dkr.ecr.us-gov-west-1.amazonaws.com/fedramp-complex/app:latest\",\"portMappings\":[{\"containerPort\":8080,\"protocol\":\"tcp\"}],\"logConfiguration\":{\"logDriver\":\"awslogs\",\"options\":{\"awslogs-group\":\"/ecs/fedramp-complex\",\"awslogs-region\":\"us-gov-west-1\",\"awslogs-stream-prefix\":\"app\"}}}]",
            "tags": {
              "Environment": "production"
            },
            "tags_all": {
              "Environment": "production"
            }
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_ecs_service",
      "name": "app_service",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "arn:aws:ecs:us-gov-west-1:123456789012:service/fedramp-complex-cluster/fedramp-complex-service",
            "arn": "arn:aws:ecs:us-gov-west-1:123456789012:service/fedramp-complex-cluster/fedramp-complex-service",
            "name": "fedramp-complex-service",
            "cluster": "arn:aws:ecs:us-gov-west-1:123456789012:cluster/fedramp-complex-cluster",
            "desired_count": 2,
            "launch_type": "FARGATE",
            "load_balancer": [
              {
                "container_name": "app",
                "container_port": 8080,
                "target_group_arn": "arn:aws:elasticloadbalancing:us-gov-west-1:123456789012:targetgroup/fedramp-complex-tg/abcdef0123456789"
              }
            ],
            "network_configuration": [
              {
                "assign_public_ip": false,
                "security_groups": ["sg-0d345679abcdef012"],
                "subnets": ["subnet-0d456789abcdef012", "subnet-0d56789abcdef0123"]
              }
            ],
            "platform_version": "1.4.0",
            "tags": {
              "Environment": "production"
            },
            "tags_all": {
              "Environment": "production"
            }
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group",
      "name": "app_sg",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "sg-0d345679abcdef012",
            "arn": "arn:aws:ec2:us-gov-west-1:123456789012:security-group/sg-0d345679abcdef012",
            "description": "App tasks",
            "egress": [
              {
                "cidr_blocks": ["10.30.0.0/16"],
                "description": "to internal services",
                "from_port": 0,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": false,
                "to_port": 0
              }
            ],
            "ingress": [
              {
                "cidr_blocks": [],
                "description": "from ALB",
                "from_port": 8080,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": ["sg-0d23456789abcdef0"],
                "self": false,
                "to_port": 8080
              }
            ],
            "name": "fedramp-complex-app-sg",
            "owner_id": "123456789012",
            "vpc_id": "vpc-0d1e2f3a4b5c67890",
            "tags": {
              "Environment": "production",
              "Compliance": "NIST-800-53"
            },
            "tags_all": {
              "Environment": "production",
              "Compliance": "NIST-800-53"
            }
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_efs_file_system",
      "name": "app_efs",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "fs-0d23456789abcdef0",
            "arn": "arn:aws:elasticfilesystem:us-gov-west-1:123456789012:file-system/fs-0d23456789abcdef0",
            "encrypted": true,
            "kms_key_id": "arn:aws:kms:us-gov-west-1:123456789012:key/44444444-1234-1234-1234-123456789012",
            "performance_mode": "generalPurpose",
            "throughput_mode": "bursting",
            "tags": {
              "Name": "fedramp-complex-efs",
              "Environment": "production",
              "Compliance": "NIST-800-53"
            },
            "tags_all": {
              "Name": "fedramp-complex-efs",
              "Environment": "production",
              "Compliance": "NIST-800-53"
            }
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group",
      "name": "efs_sg",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "sg-0d5678abcdef01234",
            "arn": "arn:aws:ec2:us-gov-west-1:123456789012:security-group/sg-0d5678abcdef01234",
            "description": "EFS mount targets",
            "egress": [],
            "ingress": [
              {
                "cidr_blocks": [],
                "description": "NFS from app tasks",
                "from_port": 2049,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": ["sg-0d345679abcdef012"],
                "self": false,
                "to_port": 2049
              }
            ],
            "name": "fedramp-complex-efs-sg",
            "owner_id": "123456789012",
            "vpc_id": "vpc-0d1e2f3a4b5c67890",
            "tags": {
              "Environment": "production",
              "Compliance": "NIST-800-53"
            },
            "tags_all": {
              "Environment": "production",
              "Compliance": "NIST-800-53"
            }
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_efs_mount_target",
      "name": "a",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "fsmt-0d23456789abcdef0",
            "file_system_id": "fs-0d23456789abcdef0",
            "ip_address": "10.30.1.50",
            "subnet_id": "subnet-0d456789abcdef012",
            "security_groups": ["sg-0d5678abcdef01234"],
            "network_interface_id": "eni-0d456789abcdef012"
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_efs_mount_target",
      "name": "b",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "fsmt-0d3456789abcdef01",
            "file_system_id": "fs-0d23456789abcdef0",
            "ip_address": "10.30.2.50",
            "subnet_id": "subnet-0d56789abcdef0123",
            "security_groups": ["sg-0d5678abcdef01234"],
            "network_interface_id": "eni-0d56789abcdef0123"
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_ssm_parameter",
      "name": "app_config",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "/fedramp/complex/app/config",
            "arn": "arn:aws:ssm:us-gov-west-1:123456789012:parameter/fedramp/complex/app/config",
            "name": "/fedramp/complex/app/config",
            "type": "SecureString",
            "key_id": "arn:aws:kms:us-gov-west-1:123456789012:key/45555555-1234-1234-1234-123456789012",
            "value": null,
            "tags": {"Environment": "production"},
            "tags_all": {"Environment": "production"}
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_secretsmanager_secret",
      "name": "db_credentials",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "arn:aws:secretsmanager:us-gov-west-1:123456789012:secret:fedramp/complex/db-abc123",
            "arn": "arn:aws:secretsmanager:us-gov-west-1:123456789012:secret:fedramp/complex/db-abc123",
            "name": "fedramp/complex/db",
            "description": "RDS credentials placeholder (no value in state)",
            "kms_key_id": "arn:aws:kms:us-gov-west-1:123456789012:key/46666666-1234-1234-1234-123456789012",
            "rotation_enabled": false,
            "tags": {"Environment": "production"},
            "tags_all": {"Environment": "production"}
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_sqs_queue",
      "name": "app_events_dlq",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "https://sqs.us-gov-west-1.amazonaws.com/123456789012/fedramp-complex-app-events-dlq",
            "arn": "arn:aws:sqs:us-gov-west-1:123456789012:fedramp-complex-app-events-dlq",
            "name": "fedramp-complex-app-events-dlq",
            "kms_master_key_id": "arn:aws:kms:us-gov-west-1:123456789012:key/47777777-1234-1234-1234-123456789012",
            "visibility_timeout_seconds": 30,
            "message_retention_seconds": 1209600,
            "tags": {"Environment": "production"},
            "tags_all": {"Environment": "production"}
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_sqs_queue",
      "name": "app_events",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "https://sqs.us-gov-west-1.amazonaws.com/123456789012/fedramp-complex-app-events",
            "arn": "arn:aws:sqs:us-gov-west-1:123456789012:fedramp-complex-app-events",
            "name": "fedramp-complex-app-events",
            "kms_master_key_id": "arn:aws:kms:us-gov-west-1:123456789012:key/47777777-1234-1234-1234-123456789012",
            "redrive_policy": "{\"deadLetterTargetArn\":\"arn:aws:sqs:us-gov-west-1:123456789012:fedramp-complex-app-events-dlq\",\"maxReceiveCount\":5}",
            "visibility_timeout_seconds": 30,
            "message_retention_seconds": 345600,
            "tags": {"Environment": "production"},
            "tags_all": {"Environment": "production"}
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_sns_topic",
      "name": "alerts",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "arn:aws:sns:us-gov-west-1:123456789012:fedramp-complex-alerts",
            "arn": "arn:aws:sns:us-gov-west-1:123456789012:fedramp-complex-alerts",
            "name": "fedramp-complex-alerts",
            "kms_master_key_id": "arn:aws:kms:us-gov-west-1:123456789012:key/48888888-1234-1234-1234-123456789012",
            "policy": null,
            "tags": {"Environment": "production"},
            "tags_all": {"Environment": "production"}
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_cloudwatch_log_group",
      "name": "ecs_app",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "/ecs/fedramp-complex",
            "arn": "arn:aws:logs:us-gov-west-1:123456789012:log-group:/ecs/fedramp-complex:*",
            "kms_key_id": "arn:aws:kms:us-gov-west-1:123456789012:key/49999999-1234-1234-1234-123456789012",
            "name": "/ecs/fedramp-complex",
            "retention_in_days": 731,
            "tags": {"Environment": "production"},
            "tags_all": {"Environment": "production"}
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_flow_log",
      "name": "vpc_flows",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "fl-0d23456789abcdef0",
            "iam_role_arn": "arn:aws:iam::123456789012:role/vpc-flow-logs-role",
            "log_destination": "arn:aws:logs:us-gov-west-1:123456789012:log-group:/vpc/fedramp-complex-flows",
            "traffic_type": "ALL",
            "vpc_id": "vpc-0d1e2f3a4b5c67890",
            "tags": {"Environment": "production"},
            "tags_all": {"Environment": "production"}
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_guardduty_detector",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "12abc345d678e9012f3a456bc7890de1",
            "arn": "arn:aws:guardduty:us-gov-west-1:123456789012:detector/12abc345d678e9012f3a456bc7890de1",
            "enable": true,
            "finding_publishing_frequency": "SIX_HOURS",
            "tags": {"Environment": "production"},
            "tags_all": {"Environment": "production"}
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_route53_zone",
      "name": "private_internal",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "id": "Z3EXAMPLE12345",
            "arn": "arn:aws:route53:::hostedzone/Z3EXAMPLE12345",
            "name": "internal.company.gov",
            "comment": "Private hosted zone",
            "vpc": [{"vpc_id": "vpc-0d1e2f3a4b5c67890", "vpc_region": "us-gov-west-1"}],
            "tags": {"Environment": "production"},
            "tags_all": {"Environment": "production"}
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_route53_record",
      "name": "api_internal_a",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "id": "Z3EXAMPLE12345_api.internal.company.gov_A",
            "name": "api.internal.company.gov",
            "type": "A",
            "ttl": 60,
            "records": ["10.30.1.10"],
            "zone_id": "Z3EXAMPLE12345"
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "ecr_api",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "vpce-0d23456789abcdef0",
            "arn": "arn:aws:ec2:us-gov-west-1:123456789012:vpc-endpoint/vpce-0d23456789abcdef0",
            "service_name": "com.amazonaws.us-gov-west-1.ecr.api",
            "vpc_endpoint_type": "Interface",
            "private_dns_enabled": true,
            "vpc_id": "vpc-0d1e2f3a4b5c67890",
            "subnet_ids": ["subnet-0d456789abcdef012", "subnet-0d56789abcdef0123"],
            "security_group_ids": ["sg-0d345679abcdef012"],
            "tags": {"Environment": "production"},
            "tags_all": {"Environment": "production"}
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_vpc_endpoint",
      "name": "ecr_dkr",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "vpce-0d3456789abcdef01",
            "arn": "arn:aws:ec2:us-gov-west-1:123456789012:vpc-endpoint/vpce-0d3456789abcdef01",
            "service_name": "com.amazonaws.us-gov-west-1.ecr.dkr",
            "vpc_endpoint_type": "Interface",
            "private_dns_enabled": true,
            "vpc_id": "vpc-0d1e2f3a4b5c67890",
            "subnet_ids": ["subnet-0d456789abcdef012", "subnet-0d56789abcdef0123"],
            "security_group_ids": ["sg-0d345679abcdef012"],
            "tags": {"Environment": "production"},
            "tags_all": {"Environment": "production"}
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket",
      "name": "access_logs",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "fedramp-complex-access-logs-202401",
            "arn": "arn:aws:s3:::fedramp-complex-access-logs-202401",
            "bucket": "fedramp-complex-access-logs-202401",
            "bucket_domain_name": "fedramp-complex-access-logs-202401.s3.amazonaws.com",
            "bucket_regional_domain_name": "fedramp-complex-access-logs-202401.s3.us-gov-west-1.amazonaws.com",
            "acl": "log-delivery-write",
            "server_side_encryption_configuration": [
              {"rule": [{"apply_server_side_encryption_by_default": [{"sse_algorithm": "AES256"}], "bucket_key_enabled": false}]}
            ],
            "tags": {"Environment": "production"},
            "tags_all": {"Environment": "production"}
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_s3_bucket",
      "name": "app_bucket",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "fedramp-complex-app-bucket-202401",
            "arn": "arn:aws:s3:::fedramp-complex-app-bucket-202401",
            "bucket": "fedramp-complex-app-bucket-202401",
            "bucket_domain_name": "fedramp-complex-app-bucket-202401.s3.amazonaws.com",
            "bucket_regional_domain_name": "fedramp-complex-app-bucket-202401.s3.us-gov-west-1.amazonaws.com",
            "logging": [{"target_bucket": "fedramp-complex-access-logs-202401", "target_prefix": "s3/"}],
            "versioning": [{"enabled": true, "mfa_delete": true}],
            "server_side_encryption_configuration": [
              {"rule": [{"apply_server_side_encryption_by_default": [{"kms_master_key_id": "arn:aws:kms:us-gov-west-1:123456789012:key/4aaaaaaa-1234-1234-1234-123456789012", "sse_algorithm": "aws:kms"}], "bucket_key_enabled": true}]}
            ],
            "tags": {
              "Name": "fedramp-complex-app-bucket",
              "Environment": "production",
              "Classification": "CUI",
              "Compliance": "NIST-800-53"
            },
            "tags_all": {
              "Name": "fedramp-complex-app-bucket",
              "Environment": "production",
              "Classification": "CUI",
              "Compliance": "NIST-800-53"
            }
          }
        }
      ]
    }
  ]
}


